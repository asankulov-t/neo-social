{"version":3,"sources":["components/Profile/Profile.module.css","components/Header/Header.module.css","components/Users/User.module.css","components/Login/Login.module.css","components/Profile/MyPosts/Post/Posts.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Messages/Message.module.css","components/Profile/MyPosts/MyPosts.module.css","components/common/TextAreaButton.module.css","components/common/Loader.module.css","components/Dialogs/Dialog.module.css","Api/Api.ts","redux/AuthReducer.ts","components/Header/Header.tsx","components/SideBar/SideBar.tsx","redux/ProfileReducer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/common/TextAreAndButton.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostContainer.tsx","assets/ava.jpg","components/Profile/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo.tsx","components/common/Loader.tsx","components/Profile/Profile.tsx","redux/DialogReducer.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialog.tsx","components/Dialogs/DialogsContainer.tsx","components/Users/Users.tsx","redux/UsersReducer.ts","components/Users/UsersCon.tsx","components/Login/Login.tsx","App.tsx","redux/ReduxStore.ts","index.tsx","components/SideBar/SideBar.module.css"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","USERS_API","currentPage","resForPage","get","then","res","data","id","post","delete","currpage","resforPage","PROFILE_API","status","put","LOGIN_API","email","password","remember","rememberMe","initialState","userId","login","isAuth","AcAuthCreator","type","loginThunk","dispatch","aut","resultCode","Header","useDispatch","headerData","useSelector","state","AuthReducer","className","header","to","nav","ul","li","onClick","SideBar","sidebar","activeClassName","active","posts","likeCount","dislike","profile","setStatus","ProfileReducer","action","newPost","messageText","Post","props","p","src","alt","postText","reaction","like","TextAreAndButton","useForm","register","reset","errors","formState","handleSubmit","t","text","onSubmit","console","log","message","callBack","placeholder","required","value","title","MyPosts","postElement","postData","map","reverse","addPost","MyPostContainer","profileReducer","dis","e","ProfileStatus","useState","editMode","setEditMode","onDoubleClick","onChange","currentTarget","changeStatus","onBlur","updateSt","ProfileInfo","wallpict","about","ava","photos","large","fullName","info","aboutMe","href","contacts","facebook","target","Loader","l","loader","withRouter","match","useEffect","params","setTimeout","st","getUserStatus","profileData","content","UpdateStatusGs","dialogs","name","messages","DialogReducer","newText","DialogItem","dialogElement","d","di","item","dialogsItems","Messages","messageElement","messageData","m","mes","sendMessage","Dialog","dilogsData","DialogsContainer","dialogData","dialogReducer","Users","users","cart","user","s","small","followed","unfallowFn","fallowFn","total","pageSize","isFetching","setUsers","UsersReducer","copyState","unFalloCopy","u","isFething","UsersCon","userReducer","Math","ceil","items","getUsersThunk","pages","i","push","allPages","setCurrentPage","setCurrPage","FallowAC","UnFallowAC","Login","auth","error","minLength","maxLength","check","App","path","render","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","Rerender","ReactDOM","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.1ea50de9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wallpict\":\"Profile_wallpict__2ikZf\",\"ava\":\"Profile_ava__3iRdQ\",\"about\":\"Profile_about__3wvmg\",\"info\":\"Profile_info__M55Jm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__yq7DA\",\"ul\":\"Header_ul__clIVo\",\"li\":\"Header_li__1aM2Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cart\":\"User_cart__SmJv7\",\"s\":\"User_s__12tVB\",\"selected\":\"User_selected__23s74\",\"loader\":\"User_loader__1wXp3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__3p98m\",\"check\":\"Login_check__2yQGi\",\"error\":\"Login_error__1d7al\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Posts_post__8yfIf\",\"reaction\":\"Posts_reaction__1ihoC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"DialogItem_dialogsItems__1GXT4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__1yPf5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3Aa17\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"TextAreaButton_text__3VXHa\",\"error\":\"TextAreaButton_error__3MrrZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__3x2eb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialog_dialogs__eECuR\"};","import axios from \"axios\";\r\n\r\nlet instance=axios.create({\r\n    withCredentials:true,\r\n    baseURL:'https://social-network.samuraijs.com/api/1.0/',\r\n    headers:{\r\n        \"API-KEY\":\"c52651a7-580b-433b-99e3-876a6eb54318\"\r\n    }\r\n})\r\n\r\nexport const USERS_API={\r\n    getUsers(currentPage:number, resForPage:number){\r\n        return instance.get(`users?page=${currentPage}&count=${resForPage}`)\r\n            .then(res=>res.data)\r\n    },\r\n    follow(id:number){\r\n        return instance.post(`follow/${id}`)\r\n            .then(res=>res.data)\r\n    },\r\n    unFollow(id:number){\r\n        return instance.delete(`follow/${id}`)\r\n            .then(res=>res.data)\r\n    },\r\n    setPage(currpage:number, resforPage:number){\r\n        return instance.get(`users?page=${currpage}&count=${resforPage}`)\r\n            .then(res=>res.data)\r\n    }\r\n}\r\n\r\nexport const HEADER_API={\r\n\r\n}\r\n\r\nexport const PROFILE_API={\r\n    getUser(id:number){\r\n        return instance.get(`profile/${id}`)\r\n            .then(res=>res.data)\r\n    },\r\n    getStatus(id:number){\r\n        return instance.get(`profile/status/${id}`).then(status=>status.data)\r\n    },\r\n    upDateStatus(status:string|null){\r\n        return instance.put('/profile/status',{status})\r\n    }\r\n}\r\n\r\nexport const LOGIN_API={\r\n    getAuth(){\r\n        return instance.get('auth/me').then(res=>res.data)\r\n    },\r\n    login(email:string,password:string,remember:boolean){\r\n        return instance.post(`auth/login`,{email,password,rememberMe:remember})\r\n    },\r\n    logout(){\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}","import {AcAuth, AuthType} from \"../types/Types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {HEADER_API, LOGIN_API} from \"../Api/Api\";\r\n\r\n\r\nlet initialState={\r\n    userId:null,\r\n    email:null,\r\n    login:null,\r\n    isAuth:false\r\n}\r\nexport  const AuthReducer=(state:AuthType=initialState,action:AcAuth)=>{\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n            return{\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const AcAuthCreator=(userId:string|null,email:string|null, login:string|null,isAuth:boolean)=>{\r\n    return{\r\n        type:'SET_USER_DATA',\r\n        data:{userId, email, login,isAuth}\r\n    }\r\n}\r\n\r\nexport const getAuthThunk=(aut:boolean)=>{\r\n    return(dispatch:Dispatch)=>{\r\n        LOGIN_API.getAuth()\r\n            .then(data=>{\r\n                if (data.resultCode===0){\r\n                    let {id, email, login}=data.data;\r\n                    dispatch(AcAuthCreator(id,email,login,aut))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const loginThunk=(email:string,password:string,remember:boolean)=>{\r\n    return(dispatch:any)=>{\r\n        LOGIN_API.login(email,password,remember).then(res=>{\r\n            if (res.data.resultCode==0){\r\n                dispatch(getAuthThunk(true))\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const logOutThunk=()=>{\r\n    return(dispatch:any)=>{\r\n        LOGIN_API.logout().then(res=>{\r\n            if (res.data.resultCode===0){\r\n                dispatch(AcAuthCreator(null,null,null,false))\r\n            }\r\n        })\r\n    }\r\n}","import React, {useEffect} from 'react';\r\nimport header from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logOutThunk} from \"../../redux/AuthReducer\";\r\nimport {StateData} from \"../../types/Types\";\r\n\r\nconst Header = () => {\r\n\r\n    let dispatch = useDispatch()\r\n    // let aut=true\r\n    // useEffect(()=>{\r\n    //    dispatch(getAuthThunk(aut))\r\n    // },[])\r\n    let headerData = useSelector((state: StateData) => state.AuthReducer)\r\n    let logOut = () => {\r\n        dispatch(logOutThunk())\r\n    }\r\n    return (\r\n        <header className={`${header.header} fixed-top`}>\r\n            <NavLink to=\"#\"><h2>NEO</h2></NavLink>\r\n            {/*<NavLink to=\"#\">last posts</NavLink>*/}\r\n            <nav className={header.nav}>\r\n                <ul className={header.ul}>\r\n                    <li className={header.li}><NavLink to=\"login\">{\r\n                        headerData.isAuth === true ? headerData.login :\r\n                            <span><i className=\"fas fa-sign-out-alt\"></i></span>\r\n                    }</NavLink></li>\r\n                    <li className={header.li}><NavLink to={headerData.isAuth?'profile':'login'}>{\r\n                        headerData.isAuth === true ?\r\n                            <span onClick={logOut}><i className=\"fas fa-running\"></i></span> : 'login'\r\n                    }</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport sidebar from './SideBar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nconst SideBar = () => {\r\n    return (\r\n        <div >\r\n            <nav className={`${sidebar.nav} ` }>\r\n                <ul className={sidebar.ul}>\r\n                    <li className={sidebar.li}><NavLink activeClassName={sidebar.active} to=\"/profile\"><i className=\"fas fa-user\"></i><span>Profile</span></NavLink></li>\r\n                    <li className={sidebar.li}><NavLink activeClassName={sidebar.active} to=\"/messages\"><i className=\"fas fa-envelope\"></i><span>Messages</span></NavLink></li>\r\n                    <li className={sidebar.li}><NavLink activeClassName={sidebar.active} to=\"/news\"><i className=\"fas fa-newspaper\"></i><span>News</span></NavLink></li>\r\n                    <li className={sidebar.li}><NavLink activeClassName={sidebar.active} to=\"/music\"><i className=\"fas fa-music\"></i><span>Music</span></NavLink></li>\r\n                    <li className={sidebar.li}><NavLink activeClassName={sidebar.active} to=\"/setting\"><i className=\"fas fa-tools\"></i><span>Setting</span></NavLink></li>\r\n                    <li className={sidebar.li}><NavLink activeClassName={sidebar.active} to=\"/Users\"><i className=\"fas fa-users\"></i><span>Users</span></NavLink></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SideBar;","import {ActionType, PostType, ProfilePageTypes, ProfileType} from '../types/Types';\r\nimport {Dispatch} from \"redux\";\r\nimport {PROFILE_API} from \"../Api/Api\";\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, post: 'Hello world', likeCount: 5, dislike: 3},\r\n        {id: 2, post: 'I want to be in USA', likeCount: 55, dislike: 0},\r\n        {id: 3, post: 'I am learning js all time', likeCount: 667, dislike: 0},\r\n        {id: 4, post: 'social network is evil', likeCount: 856, dislike: 800},\r\n        {id: 5, post: 'Hello friend lets walk', likeCount: 1250, dislike: 1},\r\n        {id: 6, post: 'It incubator is best courses', likeCount: 1591, dislike: 0},\r\n    ],\r\n    profile:null,\r\n    status:'as'\r\n}\r\n\r\nconst ProfileReducer = (state: ProfilePageTypes = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"ADD_POST\":\r\n            let newPost: PostType = {\r\n                id: 55,\r\n                post: action.messageText,\r\n                likeCount: 0,\r\n                dislike: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts:[...state.posts,newPost],\r\n            }\r\n            // let newState={...state}\r\n            // newState.posts=[...state.posts]\r\n            // newState.posts.push(newPost);\r\n            // newState.newPostText = ''\r\n            // return newState\r\n        // case 'CHANGE_POST_TEXT':\r\n        //     return {\r\n        //         ...state,\r\n        //         newPostText:action.messageText\r\n        //     }\r\n        case 'SET_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case 'GET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\nexport const addPostAC = (newText: string) => {\r\n    return {\r\n        type: 'ADD_POST',\r\n        messageText: newText\r\n    } as const\r\n}\r\n// export const changePostTextAC = (newText: string) => {\r\n//     return {\r\n//         type: 'CHANGE_POST_TEXT',\r\n//         messageText: newText\r\n//     } as const\r\n// }\r\n\r\nexport const SetProfile=(profile:ProfileType)=>{\r\n    return{\r\n        type:'SET_PROFILE',\r\n        profile\r\n    }\r\n}\r\nconst setStatus= (status: string|null)=>{\r\n    return{\r\n        type:'GET_STATUS',\r\n        status\r\n    }\r\n}\r\nexport const getUserProfile=(id:number)=>{\r\n    return (dispatch:Dispatch)=>{\r\n        PROFILE_API.getUser(id)\r\n            .then(data=>{\r\n                setTimeout(()=>{\r\n                    dispatch(SetProfile(data))\r\n                },500)\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const getUserStatus=(id:number)=>{\r\n    return (dispatch:Dispatch)=>{\r\n        PROFILE_API.getStatus(id).then((st)=>{\r\n            dispatch(setStatus(st))\r\n        })\r\n    }\r\n}\r\n\r\nexport const UpdateStatusGs=(status:string|null)=>{\r\n    return (dispatch:Dispatch)=>{\r\n        PROFILE_API.upDateStatus(status).then(res=>{\r\n            if (res.data.resultCode==0){\r\n                dispatch(setStatus(status))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default ProfileReducer;","import React from 'react';\r\nimport p from './Posts.module.css'\r\n\r\ntype PostTypes={\r\n    postText:string\r\n    like:number\r\n    dislike:number\r\n}\r\n\r\nconst Post = (props:PostTypes) => {\r\n    return (\r\n        <div className={p.post}>\r\n            <img src=\"https://i0.wp.com/jasonstatham.org/wp-content/uploads/2021/08/1.jpg?resize=800%2C400&ssl=1\" alt=\"\"/>\r\n            <p>{props.postText}</p>\r\n            <div className={p.reaction}>\r\n                <span><i className=\"far fa-thumbs-up\"></i> {props.like}</span>\r\n                <span><i className=\"far fa-thumbs-down\"></i> {props.dislike}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\nimport t from './TextAreaButton.module.css'\r\n\r\ntype FormValues = {\r\n    message: string;\r\n};\r\ntype PropsType={\r\n    message:string,\r\n    callBack:(e:string)=>void,\r\n    title:string\r\n}\r\nconst TextAreAndButton = (props:PropsType) => {\r\n    const { register,reset,formState:{errors}, handleSubmit } = useForm<FormValues>();\r\n    const onSubmit: SubmitHandler<FormValues> = data => {\r\n        console.log(data);\r\n        let message=data.message\r\n        if (message){\r\n            props.callBack(message)\r\n            reset()\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form className={t.text} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <div>\r\n                <textarea placeholder={props.message} {...register(\"message\",{\r\n                    required:'Пустое поле'\r\n                })} />\r\n             <><p>{errors?.message?.message}</p></>\r\n            </div>\r\n            <input value={props.title} type=\"submit\" />\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default TextAreAndButton;","import React, {ChangeEvent} from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport p from './MyPosts.module.css'\r\nimport TextAreAndButton from \"../../common/TextAreAndButton\";\r\n\r\ntype InPostData = {\r\n    id: number\r\n    post: string\r\n    likeCount: number\r\n    dislike: number\r\n}\r\ntype MyPostsData = {\r\n    postData: Array<InPostData>\r\n    addPost:(e:string)=>void\r\n}\r\n\r\n\r\nconst MyPosts = (props: MyPostsData) => {\r\n\r\n    // const addPost = () => {\r\n    //     props.addPost(props.newPostText)\r\n    //\r\n    // }\r\n    // const onChangeHendler = (e: ChangeEvent<HTMLTextAreaElement>) =>props.onChangeText(e.currentTarget.value)\r\n\r\n    let postElement = props.postData.map(post => <Post key={post.id}\r\n                                                       postText={post.post}\r\n                                                       like={post.likeCount}\r\n                                                       dislike={post.dislike}/>).reverse()\r\n    return (\r\n        <div className={p.posts}>\r\n            My posts\r\n            <div>\r\n                <TextAreAndButton title={'Опубликовать'} message={'New post'} callBack={props.addPost}/>\r\n            </div>\r\n            <div>\r\n                {postElement}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyPosts;","// import {ActionType, PostType} from \"../../redux/store\";\r\nimport {addPostAC} from \"../../../redux/ProfileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {StateData} from \"../../../types/Types\";\r\n\r\n\r\n// type myPostContainerTypes={\r\n//     dispatch:(action: ActionType) => void\r\n//     postData:Array<PostType>\r\n//     newPostText:string\r\n// }\r\n\r\n\r\n// const MyPostContainer = (props:myPostContainerTypes) => {\r\n//     const addPost = () => {\r\n//         if (props.newPostText !== '') {\r\n//             props.dispatch(addPostAC(props.newPostText))\r\n//             console.log(props.postData)\r\n//         }\r\n//\r\n//     }\r\n//     const onChangeHendler = (e: string) => props.dispatch(changePostTextAC(e))\r\n//     return (<MyPosts newPostText={props.newPostText}\r\n//                      onChangeText={onChangeHendler}\r\n//                      addPost={addPost}\r\n//                      postData={props.postData}\r\n//         />\r\n//     );\r\n// };\r\n\r\n// let mapStateToProps=(state:StateData)=>{\r\n//     console.log(state)\r\n//     return{\r\n//         postData:state.profileReducer.posts,\r\n//         newPostText:state.profileReducer.newPostText\r\n//     }\r\n// }\r\n// let mapDispatchToProps=(dispatch:any)=>{\r\n//     return{\r\n//         onChangeText:(e:string)=>{dispatch(changePostTextAC(e))},\r\n//         addPost:(e:string)=>{dispatch(addPostAC(e))}\r\n//     }\r\n// }\r\n//\r\n//\r\n// const MyPostContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts);\r\n//\r\n// export default MyPostContainer;\r\n\r\nimport React from 'react';\r\n\r\nconst MyPostContainer = () => {\r\n    let postData=useSelector((state:StateData)=>state.profileReducer.posts);\r\n    let dis=useDispatch();\r\n    let addPost=(e:string)=>{\r\n        dis(addPostAC(e))\r\n    }\r\n    return <MyPosts postData={postData} addPost={addPost} />\r\n};\r\n\r\nexport default MyPostContainer;","export default __webpack_public_path__ + \"static/media/ava.689a452b.jpg\";","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype ProfileStatusType={\r\n    status:string|null,\r\n    updateSt:(status:string|null)=>void\r\n}\r\n\r\nconst ProfileStatus = (props:ProfileStatusType) => {\r\n    const [editMode,setEditMode]=useState(false)\r\n    const [status,setStatus]=useState<string|null>(props.status?props.status:'')\r\n    let activeMode=()=>{\r\n        setEditMode(true)\r\n    }\r\n    let deActiveMode=()=>{\r\n        setEditMode(false)\r\n        props.updateSt(status)\r\n        setStatus('')\r\n    }\r\n    const changeStatus=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    // @ts-ignore\r\n    return (\r\n        <div>\r\n            {!editMode&&<p onDoubleClick={activeMode}>{props.status?props.status:'empty status'}</p>}\r\n            {editMode&&<input onChange={(e)=>changeStatus(e)} onBlur={deActiveMode} className=\"form-control\"\r\n                              type=\"text\" value={status?status:'empty status'}\r\n                              />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport p from \"./Profile.module.css\";\r\nimport {ProfileType} from \"../../types/Types\";\r\nimport ava from '../../assets/ava.jpg'\r\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\r\n\r\nexport type InfoType = {\r\n    profile: ProfileType,\r\n    updateSt:(status:string|null)=>void,\r\n    status:string|null\r\n}\r\nconst ProfileInfo = (props: InfoType) => {\r\n    let data={...props.profile}\r\n    return (\r\n        <div >\r\n            <img className={p.wallpict}\r\n                 src=\"https://www.bergfreunde.eu/out/pictures/promo/picture_brandshop_1440x490_4.jpg\" alt=\"\"/>\r\n            <div className={p.about}>\r\n                <img className={p.ava} src={data.photos.large ? data.photos.large : ava}\r\n                     alt={data.fullName != null ? data.fullName : 'Photo'}/>\r\n                <div className={p.info}>\r\n                    <p>{data.fullName}</p>\r\n                    <p>{data.aboutMe}</p>\r\n                    <ProfileStatus updateSt={props.updateSt} status={props.status}/>\r\n                    <p><a href={data.contacts.facebook != null ? 'https://'+data.contacts.facebook : ''}\r\n                          target='_self'\r\n                    >{data.contacts.facebook?'Facebook':null}</a>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport l from './Loader.module.css'\r\nconst Loader = () => {\r\n    return (\r\n        <div className={l.loader}>\r\n            <img src={'https://homehardware.sirv.com/resources/images/loading-image.gif'} alt=\"\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import React, {useEffect} from 'react';\r\nimport p from '../Profile/Profile.module.css'\r\nimport MyPostContainer from \"./MyPosts/MyPostContainer\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, UpdateStatusGs} from '../../redux/ProfileReducer';\r\nimport {StateData} from \"../../types/Types\";\r\nimport Loader from \"../common/Loader\";\r\nimport {Redirect, withRouter} from 'react-router-dom';\r\n\r\nconst Profile = ({match}:any) => {\r\n\r\n    let dispatch=useDispatch();\r\n\r\n    useEffect(()=>{\r\n        let userId=match.params.userId\r\n        if (!userId){\r\n            userId=14328\r\n        }\r\n        dispatch(getUserProfile(userId));\r\n        dispatch(getUserStatus(userId))\r\n    },[])\r\n    let profileData=useSelector((state :StateData)=>state.profileReducer.profile);\r\n    let isAuth=useSelector((state :StateData)=>state.AuthReducer.isAuth)\r\n    let status=useSelector((state :StateData)=>state.profileReducer.status)\r\n    let updateFuckingStatus=(status:string|null)=>{\r\n        dispatch(UpdateStatusGs(status))\r\n    }\r\n    console.log(profileData)\r\n    if (!isAuth)return <Redirect to={'/login'}/>\r\n    return (\r\n        <div className={p.content}>\r\n            {profileData?<ProfileInfo status={status} updateSt={updateFuckingStatus} profile={profileData}/>:<Loader/>}\r\n            <MyPostContainer\r\n            />\r\n        </div>\r\n    );\r\n};\r\nexport default withRouter(Profile);\r\n\r\n\r\n","import {ActionType, MessagePageType, MessageType} from '../types/Types';\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [{id: 1, name: 'Arken'},\r\n        {id: 2, name: 'Adil'},\r\n        {id: 3, name: 'Miron'},\r\n        {id: 4, name: 'John'},\r\n        {id: 5, name: 'Ledy Gaga'},\r\n        {id: 6, name: 'Johny'},],\r\n    messages: [\r\n        {id: 1, message: 'Hello'},\r\n        {id: 2, message: 'How was your day?'},\r\n        {id: 3, message: 'Can I help you'},\r\n        {id: 4, message: 'See you at school'},\r\n        {id: 5, message: 'React Is best Framework'},\r\n        {id: 6, message: 'You must learn Js'},]\r\n}\r\n\r\nconst DialogReducer = (state: MessagePageType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"SEND_MESSAGE\":\r\n            let newText: MessageType = {\r\n                id: 8958,\r\n                message: action.messageText\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newText],\r\n            }\r\n        // let copystate={...state}\r\n        // copystate.messages=[...state.messages]\r\n        // copystate.messages.push(newText)\r\n        // copystate.messageText = ''\r\n        // return copystate\r\n        // case \"CHANGE_MESSAGE_TEXT\":\r\n        //     return {\r\n        //         ...state,\r\n        //         messageText: action.messageText\r\n        //     }\r\n        default:\r\n            return state\r\n    }\r\n\r\n};\r\nexport const sendMessageAC = (messageText: string) => {\r\n    return {\r\n        type: 'SEND_MESSAGE',\r\n        messageText: messageText\r\n    }\r\n}\r\n// export const changeMessageAC = (messageText: string) => {\r\n//\r\n//     return {\r\n//         type: 'CHANGE_MESSAGE_TEXT',\r\n//         messageText: messageText\r\n//     } as const\r\n// }\r\nexport default DialogReducer;","import React from 'react';\r\nimport di from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype InDialogItemTypes = {\r\n    id: number\r\n    name: string\r\n}\r\ntype DialogItemTypes = { dialogs: Array<InDialogItemTypes> }\r\n\r\nconst DialogItem = (props: DialogItemTypes) => {\r\n\r\n    let dialogElement = props.dialogs.map(d => <div key={d.id} className={di.item}><NavLink\r\n        to={`/messages/${d.id}`}>{d.name}</NavLink></div>)\r\n    return (\r\n        <div className={di.dialogsItems}>\r\n            {dialogElement}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DialogItem;","import React, {ChangeEvent} from 'react';\r\nimport mes from \"./Message.module.css\";\r\nimport TextAreAndButton from \"../../common/TextAreAndButton\";\r\n\r\ntype InMessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\ntype MessagesType = {\r\n    messageData: Array<InMessageType>\r\n    sendMessage:(e:string)=>void\r\n}\r\n\r\nconst Messages = (props: MessagesType) => {\r\n\r\n    const sendMessage = (e:string) => {\r\n        props.sendMessage(e)\r\n    }\r\n\r\n    // const changeMessage = (e: ChangeEvent<HTMLTextAreaElement>) =>props.changeMessage(e.currentTarget.value)\r\n\r\n    let messageElement = props.messageData.map(m => (\r\n        <div key={m.id} className={mes.message}>\r\n            {m.message}\r\n        </div>\r\n    ))\r\n    return (\r\n        <div className={`col-9 ${mes.messages}`}>\r\n            {messageElement}\r\n            <div>\r\n                {/*<textarea value={props.text}*/}\r\n                {/*          onChange={changeMessage}></textarea>*/}\r\n                {/*<div>*/}\r\n                {/*    <button onClick={sendMessage}>Add post</button>*/}\r\n                {/*</div>*/}\r\n                <TextAreAndButton title={'Отправить'} message={'message'} callBack={sendMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Messages;","import React from 'react';\r\nimport d from './Dialog.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Messages from \"./Messages/Messages\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {DialogsTypes, StateData} from \"../../types/Types\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype dialogPropTypes={\r\n    dilogsData:DialogsTypes\r\n    sendMessage:(e:string)=>void\r\n}\r\nconst Dialog = (props: dialogPropTypes) => {\r\n    let isAuth=useSelector((state :StateData)=>state.AuthReducer.isAuth)\r\n    if (!isAuth)return <Redirect to={'/login'}/>\r\n    return (\r\n        <div className={`row ${d.dialogs}`}>\r\n            <div className={'col-3'}>\r\n                <DialogItem dialogs={props.dilogsData.dialogs}/>\r\n            </div>\r\n            <Messages\r\n                messageData={props.dilogsData.messages}\r\n                sendMessage={props.sendMessage}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialog;","import { sendMessageAC} from \"../../redux/DialogReducer\";\r\nimport Dialog from \"./Dialog\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { StateData } from \"../../types/Types\";\r\n\r\n\r\n\r\n\r\n// type DialogsDataType = {\r\n//     dialogs: Array<DialogsType>\r\n//     messages: Array<MessageType>\r\n// }\r\n// type DialogsContainerTypes={\r\n//     text: string\r\n//     dialogsData: DialogsDataType\r\n//     dispatch: (action: ActionType) => void\r\n// }\r\n// const DialogsContainer = (props:DialogsContainerTypes) => {\r\n//     const sendMessage = () => {\r\n//         if (props.text !== '') {\r\n//             props.dispatch(sendMessageAC())\r\n//         }\r\n//     }\r\n//     const changeMessage = (e:string) => props.dispatch(changeMessageAC(e))\r\n//     let text=props.text\r\n//     let data=props.dialogsData;\r\n//     return <Dialog text={text}\r\n//                    dialogsData={data}\r\n//                    sendMessage={sendMessage}\r\n//                    changeMessage={changeMessage}/>\r\n//     ;\r\n// };\r\n\r\n\r\n\r\n// let mapStateToProps=(state:StateData)=>{\r\n//     console.log(state)\r\n//     return{\r\n//         dialogsData:state,\r\n//         text:state.dialogReducer.messageText\r\n//     }\r\n// }\r\n// let mapsDispatchToProps=(dispatch:any)=>{\r\n//     return{\r\n//         changeMessage:(e:string)=>{dispatch(changeMessageAC(e))},\r\n//         sendMessage:(e:string)=>{dispatch(sendMessageAC(e))}\r\n//\r\n//     }\r\n// }\r\n//\r\n//\r\n// const DialogsContainer=connect(mapStateToProps,mapsDispatchToProps)(Dialog);\r\n//\r\n// export default DialogsContainer;\r\n\r\n\r\n// import React from 'react';\r\n//\r\n// const DialogsContainer = () => {\r\n//     let dialogsData=useSelector((state :StateData)=>state.dialogReducer);\r\n//     let dispatch=useDispatch();\r\n//     let changeMessage=(e:string)=>{\r\n//         dispatch(changeMessageAC(e))\r\n//     }\r\n//     let sendMessage=(e:string)=>{\r\n//         dispatch(sendMessageAC(e))\r\n//     }\r\n//     return <Dialog changeMessage={changeMessage} sendMessage={sendMessage} dilogsData={dialogsData}/>\r\n// };\r\n//\r\n// export default DialogsContainer;\r\n\r\nimport React from 'react';\r\n\r\nconst DialogsContainer = () => {\r\n    let dialogData=useSelector((state:StateData)=>state.dialogReducer)\r\n    let dispatch=useDispatch();\r\n    let sendMessage=(e:string)=>{\r\n        dispatch(sendMessageAC(e))\r\n    }\r\n    return <Dialog dilogsData={dialogData} sendMessage={sendMessage}/>\r\n};\r\n\r\nexport default DialogsContainer;","import React from 'react';\r\nimport {UsersType} from \"../../types/Types\";\r\nimport ava from '../../assets/ava.jpg'\r\nimport users from './User.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype UsersTypes = {\r\n    users: Array<UsersType>,\r\n    fallowFn: (id: number) => void\r\n    unfallowFn: (id: number) => void\r\n}\r\n\r\n\r\nconst Users = (props: UsersTypes) => {\r\n    return (\r\n        <div className={users.cart}>\r\n            {\r\n                props.users.map((user) => {\r\n                    return (\r\n                        <div className={users.s}>\r\n                            <div>\r\n                                <NavLink to={`/profile/${user.id}`}>\r\n                                    <img src={user.photos.small === null ? ava : user.photos.small} alt=\"\"/>\r\n                                </NavLink>\r\n                                <h3>{user.name}</h3>\r\n                                <h4>{user.status}</h4>\r\n                            </div>\r\n\r\n                            <button\r\n                                onClick={user.followed === true ? () => props.unfallowFn(user.id) : () => props.fallowFn(user.id)}>\r\n                                {user.followed === true ? 'Отписаться' : 'Подписаться'}\r\n                            </button>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Users;","import {FallowAc, fethingType, setCurrPage, setTotalType, setUser, UnFallowAc, Users} from \"../types/Types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {USERS_API} from \"../Api/Api\";\r\n\r\nlet initialState:Users={\r\n  users:[\r\n\r\n  ],\r\n  currentPage:1,\r\n  total:0,\r\n  pageSize:15,\r\n  isFetching:true\r\n}\r\n\r\n\r\n\r\nconst UsersReducer=(state=initialState, action:FallowAc|UnFallowAc|setUser|setCurrPage|fethingType|setTotalType)=>{\r\n    switch (action.type) {\r\n        case \"FALLOW\":\r\n            let copyState={...state,users:state.users.map(s=>s.id===action.id?{...s,followed:true}:s)}\r\n            return copyState;\r\n        case \"UNFALLOW\":\r\n            let unFalloCopy={...state,users:state.users.map(u=>u.id===action.id?{...u,followed:false}:u)}\r\n            return unFalloCopy\r\n        case 'SET_USERS':\r\n            return {...state, users: [...action.users]}\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {...state, currentPage:action.currentPage}\r\n        case \"SET_FETCHING\":\r\n            return {...state, isFetching:action.isFething}\r\n        case \"SET_TOTAL\":\r\n            return {...state, total:action.total}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const FallowAC=(id:number):FallowAc=>{\r\n    return{\r\n        type:'FALLOW',\r\n        id\r\n    }\r\n}\r\nexport const UnFallowAC=(id:number):UnFallowAc=>{\r\n    return{\r\n        type:'UNFALLOW',\r\n        id\r\n    }\r\n}\r\nexport const setUsers=(users:Users)=>{\r\n    return{\r\n        type:'SET_USERS',\r\n        users\r\n    }\r\n}\r\nexport const setCurrentPage=(currentPage:number):setCurrPage=>{\r\n    return{\r\n        type:'SET_CURRENT_PAGE',\r\n        currentPage\r\n    }\r\n}\r\nexport const toggleAc=(isFething:boolean):fethingType=>{\r\n    return{\r\n        type:'SET_FETCHING',\r\n        isFething\r\n    }\r\n}\r\nexport const setTotalCount=(total:number):setTotalType=>{\r\n    return{\r\n        type:'SET_TOTAL',\r\n        total\r\n    }\r\n}\r\n\r\nexport const getUsersThunk=(currpage:number,pageSize:number)=>{\r\n    // @ts-ignore\r\n    return dispatch=>{\r\n        USERS_API.getUsers(currpage,pageSize)\r\n            .then(data=>{\r\n                    dispatch(setUsers(data.items))\r\n                    dispatch(setTotalCount(200))\r\n                    dispatch(toggleAc(false))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport default UsersReducer;\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateData} from \"../../types/Types\";\r\nimport Users from \"./Users\";\r\nimport {\r\n    FallowAC,\r\n    getUsersThunk,\r\n    setCurrentPage,\r\n    setUsers,\r\n    UnFallowAC\r\n} from \"../../redux/UsersReducer\";\r\nimport u from './User.module.css'\r\nimport Loader from \"../common/Loader\";\r\nimport { USERS_API} from \"../../Api/Api\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst UsersCon = () => {\r\n    let dis=useDispatch();\r\n    let users=useSelector((state:StateData) => state.userReducer.users);\r\n    let currentPage=useSelector((state:StateData) => state.userReducer.currentPage);\r\n    let loader=useSelector((state:StateData) => state.userReducer.isFetching);\r\n    let total=useSelector((state:StateData) => state.userReducer.total);\r\n    let pageSize=useSelector((state:StateData) => state.userReducer.pageSize);\r\n    let resForPage=Math.ceil(total/pageSize);\r\n    let isAuth=useSelector((state :StateData)=>state.AuthReducer.isAuth)\r\n\r\n    useEffect(()=>{\r\n                dis(getUsersThunk(currentPage,resForPage))\r\n                // USERS_API.getUsers(currentPage,pageSize)\r\n                //     .then(data=>{\r\n                //     setTimeout(()=>{\r\n                //         dis(setUsers(data.items))\r\n                //         dis(setTotalCount(200))\r\n                //         dis(toggleAc(false))\r\n                //     },1000)\r\n                //\r\n                // })\r\n    },[])\r\n\r\n    let pages=[]\r\n    for (let i=1;i<=resForPage;i++){\r\n        pages.push(i)\r\n    }\r\n\r\n    const fallowFn=(id:number)=>{\r\n        USERS_API.follow(id)\r\n        .then(data=>{\r\n            if (data.resultCode===0){\r\n                dis(FallowAC(id))\r\n            }\r\n        })\r\n    }\r\n\r\n    const unfallowFn=(id:number)=>{\r\n        USERS_API.unFollow(id)\r\n        .then(data=>{\r\n            if (data.resultCode===0){\r\n                dis(UnFallowAC(id))\r\n            }\r\n        })\r\n    }\r\n\r\n    const setCurrPage=(p:number)=>{\r\n        dis(setCurrentPage(p));\r\n\r\n        USERS_API.setPage(p,resForPage)\r\n        .then(data=>{\r\n            dis(setUsers(data.items))\r\n        })\r\n    }\r\n\r\n\r\n    let allPages= pages.map((p)=>{\r\n        return(\r\n            <li ><a onClick={()=>setCurrPage(p)} className=\"page-link\" href=\"#\">{p}</a></li>\r\n        )\r\n    })\r\n    if (!isAuth)return <Redirect to={'/login'}/>\r\n    return (\r\n        <div>\r\n            {loader===true?  <div className={u.loader}><Loader/></div>:\r\n               <>\r\n                   <ul className=\"pagination justify-content-center\">\r\n                       {allPages}\r\n                   </ul>\r\n                   <Users users={users} fallowFn={fallowFn} unfallowFn={unfallowFn}/>\r\n               </>\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UsersCon;","import React from 'react';\r\nimport l from './Login.module.css'\r\n// import {useSelector} from \"react-redux\";\r\n// import {StateData} from \"../../types/Types\";\r\n\r\n// const Login = () => {\r\n//     let login=useSelector((state:StateData)=>state.AuthReducer.isAuth)\r\n//     let name=useSelector((state:StateData) =>state.AuthReducer.login)\r\n//     return (\r\n//         <div>\r\n//             {login?<h5>{`Добро пожаловать в NEO Network ${name}`}</h5>:\r\n//                 <h5>Вы не авторизованы</h5>\r\n//             }\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginThunk} from \"../../redux/AuthReducer\";\r\nimport {StateData} from \"../../types/Types\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype FormValues = {\r\n    login: string;\r\n    password: string;\r\n    remember: boolean;\r\n};\r\n\r\nexport default function Login() {\r\n    let dis = useDispatch();\r\n    let auth = useSelector((state: StateData) => state.AuthReducer.isAuth);\r\n    const {register, reset, formState: {errors}, handleSubmit} = useForm<FormValues>();\r\n    const onSubmit: SubmitHandler<FormValues> = data => {\r\n        console.log(data);\r\n        dis(loginThunk(data.login, data.password, data.remember))\r\n        reset()\r\n    };\r\n    if (auth === true) {\r\n        return <Redirect to={'profile'}/>\r\n    }\r\n    return (\r\n        <form className={l.login} onSubmit={handleSubmit(onSubmit)}>\r\n            <div className={errors ? l.error : ''}>\r\n                <input placeholder={'Login'} {...register(\"login\",\r\n                    {\r\n                        required: 'Поле обязательно к заполнению', minLength: {value: 5, message: 'Минимум 5 символов'},\r\n                        maxLength: {\r\n                            value: 35,\r\n                            message: 'Максимум 20 символов'\r\n                        }\r\n                    })} />\r\n            </div>\r\n            <div>{errors?.login && <p>{errors?.login?.message}</p>}</div>\r\n            <div>\r\n                <input type='password' placeholder={'Password'} {...register(\"password\",\r\n                    {\r\n                        required: 'Поле обязательно к заполнению',\r\n                        minLength: {value: 5, message: 'Минимум 5 символов'},\r\n                        maxLength: 20\r\n                    })} />\r\n            </div>\r\n            <div>{errors?.password && <p>{errors?.password?.message}</p>}</div>\r\n            <div className={l.check}><input type=\"checkbox\" {...register(\"remember\")} /><span>Remember me</span>\r\n            </div>\r\n            <input value={'Войти'} type=\"submit\"/>\r\n        </form>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/Header/Header\";\r\nimport SideBar from \"./components/SideBar/SideBar\";\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport {Route} from 'react-router-dom';\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersCon from \"./components/Users/UsersCon\";\r\nimport Login from \"./components/Login/Login\";\r\n\r\n// type DialogType = {\r\n//     id: number\r\n//     name: string\r\n// }\r\n// type MessageType = {\r\n//     id: number\r\n//     message: string\r\n// }\r\n// type DialogsTypes = {\r\n//     messageText: string\r\n//     dialogs: Array<DialogType>\r\n//     messages: Array<MessageType>\r\n// }\r\n//\r\n// type PostDataType = {\r\n//     id: number\r\n//     post: string\r\n//     likeCount: number\r\n//     dislike: number\r\n// }\r\n//\r\n// type ProfilePageTypes = {\r\n//     newPostText: string\r\n//     posts: Array<PostDataType>\r\n// }\r\n//\r\n// type StateData = {\r\n//     dialogReducer: DialogsTypes\r\n//     profileReducer: ProfilePageTypes\r\n// }\r\n//\r\n//\r\n// type AppTypes = {\r\n//     state: StateData\r\n//     dispatch: (action: ActionType) => void\r\n//}\r\n// postData={props.state.profileReducer.posts}\r\n// dispatch={props.dispatch.bind(props.state)}\r\n// newPostText={props.state.profileReducer.newPostText}\r\n\r\n// text={props.state.dialogReducer.messageText}\r\n// dispatch={props.dispatch.bind(props.state)}\r\n// dialogsData={props.state.dialogReducer}\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <div className={'row'}>\r\n                <div className={'col-3 fixed-left'}>\r\n                    <SideBar/>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <Route path={'/profile/:userId?'}\r\n                           render={() => <Profile\r\n                           />}/>\r\n                    <Route path={'/messages'}\r\n                           render={() => <DialogsContainer\r\n                           />}/>\r\n                    <Route path={'/users'}\r\n                           render={() => <UsersCon\r\n                           />}/>\r\n                    <Route path={'/login'}\r\n                           render={() => <Login\r\n                           />}/>\r\n                </div>\r\n                <div className=\"col-3\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport ProfileReducer from \"./ProfileReducer\";\r\nimport DialogReducer from \"./DialogReducer\";\r\nimport UsersReducer from \"./UsersReducer\";\r\nimport {AuthReducer} from \"./AuthReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n    profileReducer: ProfileReducer,\r\n    dialogReducer: DialogReducer,\r\n    userReducer:UsersReducer,\r\n    AuthReducer\r\n})\r\nlet store = createStore(reducers,applyMiddleware(thunkMiddleware))\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/ReduxStore\";\nimport {Provider} from \"react-redux\";\n\n// dispatch={store.dispatch.bind(store)\n\nconst Rerender=()=>{\n    ReactDOM.render(\n        <BrowserRouter>\n           <Provider store={store}>\n               <App/>\n           </Provider>\n        </BrowserRouter>\n        ,\n        document.getElementById('root')\n    );\n}\nRerender()\nstore.subscribe(()=>{\n    Rerender()\n})\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"SideBar_nav__28ewa\",\"ul\":\"SideBar_ul__2eOnI\",\"li\":\"SideBar_li__2-BPu\",\"active\":\"SideBar_active__Q4w7w\"};"],"sourceRoot":""}